
(function template(factory, root) {
        if (typeof module === "object" && typeof module.exports === "object") {
            var v = factory(require);
            if (v !== undefined)
                module.exports = v;
        }
        else if (typeof define === "function" && define.amd) {
            define(["require"], (require) => factory(require));
        }
        else {
            factory(null, root);
        }
    })(function anonymous(req
/**/) {
class Resolver {
        constructor(paths = {}) {
            this.paths = paths;
        }
        resolve(path, uri) {
            var paths = this.paths;
            path = (path ? [path] : []).concat([uri]).join("/");
            var array = (path || "").replace(/\\/gi, "/").split("/");
            var i;
            uri = uri.replace(/\\/gi, "/");
            for (i in paths) {
                if (uri.indexOf(`${i}/`) === 0) {
                    return uri.replace(i, paths[i]);
                }
            }
            for (i = 0; i < array.length; i++) {
                if (!array[i] && i > 0)
                    array.splice(i, 1) && i--;
                else if (array[i] === ".")
                    array.splice(i, 1) && i--;
                else if (array[i] === ".." && i > 0 && array[i - 1] !== ".." && array[i - 1])
                    array.splice(i - 1, 2) && (i -= 2);
            }
            return array.join("/");
        }
    }
var resolver = new Resolver({"node_modules":"node_modules"});
var names = ["src/index"]
var res = [{}];
var require = function(currentPath, name) { var n = resolver.resolve(currentPath, name); return names.indexOf(n) >= 0 && res[names.indexOf(n)] || req(name); }
return res[0] = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class Transaction {
        constructor(_transaction) {
            this._transaction = _transaction;
        }
        execute(sql, params) {
            return new Promise((resolve, reject) => {
                try {
                    var parms = sql && params && sql.match(/:\w+/gi).map((_) => params[_.substring(1)] || null) || [];
                    var request = sql.replace(/:\w+/gi, "?");
                    this._transaction.executeSql(request, parms, (transaction, data) => resolve(data), (transaction, error) => reject(error));
                }
                catch (e) {
                    reject(e);
                }
            });
        }
        select(sql, params) {
            return new Promise((resolve, reject) => {
                try {
                    var parms = sql && params && sql.match(/:\w+/gi).map((_) => params[_.substring(1)] || null) || [];
                    var request = sql.replace(/:\w+/gi, "?");
                    this._transaction.executeSql(request, parms, (t, data) => {
                        var res = [];
                        for (var i = 0; i < data.rows.length; i++) {
                            res.push(data.rows.item(i));
                        }
                        resolve(res);
                    }, reject);
                }
                catch (e) {
                    reject(e);
                }
            });
        }
    }
    exports.Transaction = Transaction;
    class DataBase {
        constructor(name, version, description, size, callback) {
            if (window.openDatabase) {
                this._db = openDatabase(name, version, description, size, (db) => {
                    var v = localStorage.getItem("web-sql-api-database-version");
                    if (v !== version) {
                        callback.call(this, this);
                    }
                    localStorage.setItem("web-sql-api-database-version", version);
                });
            }
        }
        transaction(callback) {
            return new Promise((resolve, reject) => {
                this._db && this._db.transaction(t => {
                    var tr = new Transaction(t);
                    try {
                        if (typeof callback === "string") {
                            var promise = Promise.all(callback.split(";")
                                .filter(sql => sql)
                                .map(sql => tr.execute(sql)));
                            promise.then((res) => resolve(res));
                            promise.catch(e => reject(e));
                        }
                        else {
                            resolve(callback.call(this, tr));
                        }
                    }
                    catch (e) {
                        reject(e);
                    }
                });
            });
        }
    }
    exports.DataBase = DataBase;
})(require.bind(null, "src/"),res[0]) || res[0];
}, typeof window !== 'undefined' && (window.WebSqlApi = {}) || {})