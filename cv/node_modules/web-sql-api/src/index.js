(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Transaction = /** @class */ (function () {
        function Transaction(_transaction) {
            this._transaction = _transaction;
        }
        Transaction.prototype.execute = function (sql, params) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                try {
                    var parms = sql && params && sql.match(/:\w+/gi).map(function (_) { return params[_.substring(1)] || null; }) || [];
                    var request = sql.replace(/:\w+/gi, "?");
                    _this._transaction.executeSql(request, parms, function (transaction, data) { return resolve(data); }, function (transaction, error) { return reject(error); });
                }
                catch (e) {
                    reject(e);
                }
            });
        };
        Transaction.prototype.select = function (sql, params) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                try {
                    var parms = sql && params && sql.match(/:\w+/gi).map(function (_) { return params[_.substring(1)] || null; }) || [];
                    var request = sql.replace(/:\w+/gi, "?");
                    _this._transaction.executeSql(request, parms, function (t, data) {
                        var res = [];
                        for (var i = 0; i < data.rows.length; i++) {
                            res.push(data.rows.item(i));
                        }
                        resolve(res);
                    }, reject);
                }
                catch (e) {
                    reject(e);
                }
            });
        };
        return Transaction;
    }());
    exports.Transaction = Transaction;
    var DataBase = /** @class */ (function () {
        function DataBase(name, version, description, size, callback) {
            var _this = this;
            if (window.openDatabase) {
                this._db = openDatabase(name, version, description, size, function (db) {
                    var v = localStorage.getItem("web-sql-api-database-version");
                    if (v !== version) {
                        callback.call(_this, _this);
                    }
                    localStorage.setItem("web-sql-api-database-version", version);
                });
            }
        }
        DataBase.prototype.transaction = function (callback) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this._db && _this._db.transaction(function (t) {
                    var tr = new Transaction(t);
                    try {
                        if (typeof callback === "string") {
                            var promise = Promise.all(callback.split(";")
                                .filter(function (sql) { return sql; })
                                .map(function (sql) { return tr.execute(sql); }));
                            promise.then(function (res) { return resolve(res); });
                            promise.catch(function (e) { return reject(e); });
                        }
                        else {
                            resolve(callback.call(_this, tr));
                        }
                    }
                    catch (e) {
                        reject(e);
                    }
                });
            });
        };
        return DataBase;
    }());
    exports.DataBase = DataBase;
});
//# sourceMappingURL=index.js.map