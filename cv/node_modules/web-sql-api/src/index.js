(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class Transaction {
        constructor(_transaction) {
            this._transaction = _transaction;
        }
        execute(sql, params) {
            return new Promise((resolve, reject) => {
                try {
                    var parms = sql && params && sql.match(/:\w+/gi).map((_) => params[_.substring(1)] || null) || [];
                    var request = sql.replace(/:\w+/gi, "?");
                    this._transaction.executeSql(request, parms, (transaction, data) => resolve(data), (transaction, error) => reject(error));
                }
                catch (e) {
                    reject(e);
                }
            });
        }
        select(sql, params) {
            return new Promise((resolve, reject) => {
                try {
                    var parms = sql && params && sql.match(/:\w+/gi).map((_) => params[_.substring(1)] || null) || [];
                    var request = sql.replace(/:\w+/gi, "?");
                    this._transaction.executeSql(request, parms, (t, data) => {
                        var res = [];
                        for (var i = 0; i < data.rows.length; i++) {
                            res.push(data.rows.item(i));
                        }
                        resolve(res);
                    }, reject);
                }
                catch (e) {
                    reject(e);
                }
            });
        }
    }
    exports.Transaction = Transaction;
    class DataBase {
        constructor(name, version, description, size, callback) {
            if (window.openDatabase) {
                this._db = openDatabase(name, version, description, size, (db) => {
                    var v = localStorage.getItem("web-sql-api-database-version");
                    if (v !== version) {
                        callback.call(this, this);
                    }
                    localStorage.setItem("web-sql-api-database-version", version);
                });
            }
        }
        transaction(callback) {
            return new Promise((resolve, reject) => {
                this._db && this._db.transaction(t => {
                    var tr = new Transaction(t);
                    try {
                        if (typeof callback === "string") {
                            var promise = Promise.all(callback.split(";")
                                .filter(sql => sql)
                                .map(sql => tr.execute(sql)));
                            promise.then((res) => resolve(res));
                            promise.catch(e => reject(e));
                        }
                        else {
                            resolve(callback.call(this, tr));
                        }
                    }
                    catch (e) {
                        reject(e);
                    }
                });
            });
        }
    }
    exports.DataBase = DataBase;
});
//# sourceMappingURL=index.js.map